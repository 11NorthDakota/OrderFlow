version: '3.9'

services:
  ## PRODUCT DB ##
  product_db:
    image: postgres
    container_name: product_db
    ports:
      - '5432:5432'
    environment:
      - POSTGRES_DB=productdatabase
      - POSTGRES_USER=product
      - POSTGRES_PASSWORD=product
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U product"]
      interval: 5s
      timeout: 3s
      retries: 5
    volumes:
      - product_db_data:/var/lib/postgresql/data

  ## PRODUCT SERVICE ##
  product-service:
    image: product-service
    container_name: product-service
    build:
      context: ./ProductService
      dockerfile: Dockerfile
    ports:
      - '8080:8080'
    environment:
      - db_url=jdbc:postgresql://product_db:5432/productdatabase
      - db_username=product
      - db_password=product
      - kafka_bootstrap=kafka-node-1:9091
    depends_on:
      product_db:
        condition: service_healthy
      kafka-node-1:
        condition: service_started

  ## ORDER DB ##
  order_db:
    image: postgres
    container_name: order_db
    ports:
      - '5437:5432'
    environment:
      - POSTGRES_DB=orderdatabase
      - POSTGRES_USER=order
      - POSTGRES_PASSWORD=order
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U order"]
      interval: 5s
      timeout: 3s
      retries: 5
    volumes:
      - order_db_data:/var/lib/postgresql/data

  ## ORDER SERVICE ##
  order-service:
    image: order-service
    container_name: order-service
    build:
      context: ./OrderService
      dockerfile: Dockerfile
    ports:
      - '8081:8081'
    environment:
      - db_url=jdbc:postgresql://order_db:5432/orderdatabase
      - db_username=order
      - db_password=order
      - kafka_bootstrap=kafka-node-1:9091
      - product_service_url=http://product-service:8080
    depends_on:
      order_db:
        condition: service_healthy
      product-service:
        condition: service_started
      kafka-node-1:
        condition: service_started

  ## INVENTORY DB ##
  inventory_db:
    image: postgres
    container_name: inventory_db
    ports:
      - '5439:5432'
    environment:
      - POSTGRES_DB=inventorydatabase
      - POSTGRES_USER=inventory
      - POSTGRES_PASSWORD=inventory
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U inventory"]
      interval: 5s
      timeout: 3s
      retries: 5
    volumes:
      - inventory_db_data:/var/lib/postgresql/data

  ## INVENTORY SERVICE ##
  inventory-service:
    image: inventory-service
    container_name: inventory-service
    build:
      context: ./InventoryService
      dockerfile: Dockerfile
    ports:
      - '8082:8082'
    environment:
      - db_url=jdbc:postgresql://inventory_db:5432/inventorydatabase
      - db_username=inventory
      - db_password=inventory
      - kafka_bootstrap=kafka-node-1:9091
    depends_on:
      inventory_db:
        condition: service_healthy
      kafka-node-1:
        condition: service_started

  ## NOTIFICATION SERVICE ##
  notification-service:
    image: notification-service
    container_name: notification-service
    build:
      context: ./NotificationService
      dockerfile: Dockerfile
    ports:
      - '8083:8083'
    environment:
      - kafka_bootstrap=kafka-node-1:9091
    depends_on:
      kafka-node-1:
        condition: service_started

  ## KAFKA NODE ##
  kafka-node-1:
    image: bitnami/kafka:latest
    container_name: kafka-node-1
    ports:
      - '9091:9091'
      - '9092:9092'
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9091,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-node-1:9091
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka-node-1:9093
      - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=1
    volumes:
      - kafka_data:/bitnami/kafka
    restart: unless-stopped

volumes:
  product_db_data:
  order_db_data:
  inventory_db_data:
  kafka_data:
